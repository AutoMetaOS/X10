(()=>{"use strict";const t={saccadesInterval:0,lineHeight:1,fixationStrength:2,scope:"global",onPageLoad:!1},n=[],e=[];let a;async function i(t){return new Promise(((n,e)=>{chrome.runtime.sendMessage({message:"retrievePrefs",action:t},(async t=>{n(t.data)}))}))}function o(t,n){return new Promise(((e,a)=>{chrome.runtime.sendMessage({message:"storePrefs",data:t,action:n},(async t=>{e(!0)}))}))}async function s(){return i("local")}async function r(){return i("global")}async function c(t){return o(t,"local")}async function l(t){return o(t,"global")}async function d(t){const n=await s();let e=await r();const i=await a();let o=n[i].scope;const d="function"==typeof t?t("local"===o?n[i]:e):t;d.scope&&(o=d.scope),"local"===o?n[i]={...n[i],...d}:e={...e,...d},n[i].scope=o,e.scope="global",h("local"===o?n[i]:e),c(n),l(e)}async function b(){let n=await s(),i=await r();const o=await a();null==n&&(n={}),n[o]={...t,...n[o]},i={...t,...i},c(n),l(i),"global"===n[o].scope?(h(i),h(i,e)):(h(n[o]),h(n[o],e))}function h(t,e){Array.isArray(e)?e.forEach((n=>{n(t)})):n.forEach((n=>{n(t)}))}const f={init:function(i){return n.push(i.subscribe),i.onStartup&&e.push(i.onStartup),a=i.getOrigin,{start:b,setPrefs:d,defaultPrefs:()=>t}}};class g{static#t=()=>!0;static logError=t=>{this.#t()||console.error(t)};static logInfo=(...t)=>{this.#t()||console.log(...t)};static logTime=t=>this.#t()?()=>{}:(console.time(t),()=>console.timeEnd(t))}class u{#n={childList:!0,subtree:!0};#e;#a;#i;#o;constructor(t,n,e){this.#e=new MutationObserver(e),this.#i=n??this.#n,this.#o=t}observe(){this.#e.observe(this.#o,this.#i)}destroy(){this.#e.disconnect()}}const y="undefined"==typeof browser?chrome:browser,p=["STYLE","SCRIPT","BR-SPAN","BR-FIXATION","BR-BOLD"];let v;function x(t){return t.replace(/\p{L}+/gu,(t=>{const{length:n}=t;let e=1;n>3&&(e=Math.round(n/2));const a=t.slice(0,e),i=t.slice(e),o=`<br-bold class="br-bold">${function(t){const n=Math.round(.33*t.length);if(0===n)return`<br-fixation fixation-strength="1">${t}</br-fixation>`;const e=t.substring(0,n),a=t.substring(t.length-n,t.length),i=`<br-fixation fixation-strength="1">${e}</br-fixation>`,o=`<br-fixation fixation-strength="3">${a}</br-fixation>`,s=t.length-2*n>0?`<br-fixation fixation-strength="2">${t.substring(n,t.length-n)}</br-fixation>`:"";return i+s+o}(a)}</br-bold>${i}`;return o}))}function m(t){if(t?.parentElement?.tagName&&!p.includes(t.parentElement.tagName))if(t.nodeType===Node.TEXT_NODE&&t.nodeValue.length)try{const n=document.createElement("br-span");if(n.innerHTML=x(t.nodeValue),0===n.childElementCount)return;t.parentElement.replaceChild(n,t)}catch(t){}else t.hasChildNodes()&&[...t.childNodes].forEach(m)}const E=t=>{const n=g.logTime("ToggleReading-Time");try{if(t){document.getElementsByTagName("br-bold").length<1&&function(){const t=document.createElement("style");t.textContent='\n    .br-bold[fixation-strength="1"] :is(\n      [saccades-interval="0"] br-bold [fixation-strength="1"], \n      [saccades-interval="1"] br-bold:nth-of-type(2n+1) [fixation-strength="1"],\n      [saccades-interval="2"] br-bold:nth-of-type(3n+1) [fixation-strength="1"],\n      [saccades-interval="3"] br-bold:nth-of-type(4n+1) [fixation-strength="1"],\n      [saccades-interval="4"] br-bold:nth-of-type(5n+1) [fixation-strength="1"]\n      ) { \n      font-weight: bold !important; display: inline; line-height: var(--br-line-height,initial); \n    }\n\n    .br-bold[fixation-strength="2"] :is(\n      [saccades-interval="0"] br-bold [fixation-strength="1"], \n      [saccades-interval="1"] br-bold:nth-of-type(2n+1) [fixation-strength="1"],\n      [saccades-interval="2"] br-bold:nth-of-type(3n+1) [fixation-strength="1"],\n      [saccades-interval="3"] br-bold:nth-of-type(4n+1) [fixation-strength="1"],\n      [saccades-interval="4"] br-bold:nth-of-type(5n+1) [fixation-strength="1"],\n\n      [saccades-interval="0"] br-bold [fixation-strength="2"], \n      [saccades-interval="1"] br-bold:nth-of-type(2n+1) [fixation-strength="2"],\n      [saccades-interval="2"] br-bold:nth-of-type(3n+1) [fixation-strength="2"],\n      [saccades-interval="3"] br-bold:nth-of-type(4n+1) [fixation-strength="2"],\n      [saccades-interval="4"] br-bold:nth-of-type(5n+1) [fixation-strength="2"]\n      ) { \n      font-weight: bold !important; display: inline; line-height: var(--br-line-height,initial); \n    }\n\n    .br-bold[fixation-strength="3"] :is(\n\n      [saccades-interval="0"] br-bold [fixation-strength="1"], \n      [saccades-interval="1"] br-bold:nth-of-type(2n+1) [fixation-strength="1"],\n      [saccades-interval="2"] br-bold:nth-of-type(3n+1) [fixation-strength="1"],\n      [saccades-interval="3"] br-bold:nth-of-type(4n+1) [fixation-strength="1"],\n      [saccades-interval="4"] br-bold:nth-of-type(5n+1) [fixation-strength="1"],\n      \n      [saccades-interval="0"] br-bold [fixation-strength="2"], \n      [saccades-interval="1"] br-bold:nth-of-type(2n+1) [fixation-strength="2"],\n      [saccades-interval="2"] br-bold:nth-of-type(3n+1) [fixation-strength="2"],\n      [saccades-interval="3"] br-bold:nth-of-type(4n+1) [fixation-strength="2"],\n      [saccades-interval="4"] br-bold:nth-of-type(5n+1) [fixation-strength="2"]\n      ,\n      [saccades-interval="0"] br-bold [fixation-strength="3"], \n      [saccades-interval="1"] br-bold:nth-of-type(2n+1) [fixation-strength="3"],\n      [saccades-interval="2"] br-bold:nth-of-type(3n+1) [fixation-strength="3"],\n      [saccades-interval="3"] br-bold:nth-of-type(4n+1) [fixation-strength="3"],\n      [saccades-interval="4"] br-bold:nth-of-type(5n+1) [fixation-strength="3"]\n      ) { \n      font-weight: bold !important; display: inline; line-height: var(--br-line-height,initial); \n    }\n    ',document.head.appendChild(t)}(),document.body.classList.add("br-bold"),[...document.body.children].forEach(m),v||(v=new u(document.body,null,L),v.observe())}else document.body.classList.remove("br-bold"),v&&(v.destroy(),v=null)}catch(t){g.logError(t)}finally{n()}},w=t=>{const n=null==t?0:t;document.body.setAttribute("saccades-interval",n)},T=t=>{document.body.setAttribute("fixation-strength",t)},P=t=>{document.body.style.setProperty("--br-line-height",t)};function L(t){g.logInfo("mutationCallback fired ",t.length),t.forEach((({type:t,addedNodes:n})=>{"childList"===t&&n?.forEach(m)}))}const O=(t,n,e)=>{switch(t.type){case"setFixationStrength":T(t.data),e({success:!0});break;case"setReadingMode":E(t.data);break;case"setSaccadesIntervalInDOM":w(t.data);break;case"setlineHeight":P(t.data);break;case"getOrigin":e({data:window.location.origin});break;case"getReadingMode":e({data:document.body.classList.contains("br-bold")})}};var N;N=async()=>{y.runtime.onMessage.addListener(O);const{start:t}=f.init({getOrigin:async()=>new Promise(((t,n)=>{t(window.location.origin)})),subscribe:t=>{t.onPageLoad&&(E(t.onPageLoad),w(t.saccadesInterval),T(t.fixationStrength),P(t.lineHeight))}});t()},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(N,1):document.addEventListener("DOMContentLoaded",N)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,