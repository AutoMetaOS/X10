(()=>{"use strict";const e={saccadesInterval:0,lineHeight:1,fixationStrength:2,scope:"global",onPageLoad:!1},t=[],n=[];let a;async function s(e){return new Promise(((t,n)=>{chrome.runtime.sendMessage({message:"retrievePrefs",action:e},(async e=>{t(e.data)}))}))}function c(e,t){return new Promise(((n,a)=>{chrome.runtime.sendMessage({message:"storePrefs",data:e,action:t},(async e=>{n(!0)}))}))}async function o(){return s("local")}async function r(){return s("global")}async function i(e){return c(e,"local")}async function d(e){return c(e,"global")}async function l(e){const t=await o();let n=await r();const s=await a();let c=t[s].scope;const l="function"==typeof e?e("local"===c?t[s]:n):e;l.scope&&(c=l.scope),"local"===c?t[s]={...t[s],...l}:n={...n,...l},t[s].scope=c,n.scope="global",g("local"===c?t[s]:n),i(t),d(n)}async function u(){let t=await o(),s=await r();const c=await a();null==t&&(t={}),t[c]={...e,...t[c]},s={...e,...s},i(t),d(s),"global"===t[c].scope?(g(s),g(s,n)):(g(t[c]),g(t[c],n))}function g(e,n){Array.isArray(n)?n.forEach((t=>{t(e)})):t.forEach((t=>{t(e)}))}const m={init:function(s){return t.push(s.subscribe),s.onStartup&&n.push(s.onStartup),a=s.getOrigin,{start:u,setPrefs:l,defaultPrefs:()=>e}}},h=document.getElementById("readingModeToggleBtn"),f=document.getElementById("saccadesSlider"),y=document.getElementById("saccadesLabelValue"),b=document.getElementById("fixationStrengthSlider"),p=document.getElementById("fixationStrengthLabelValue"),E=document.getElementById("lineHeightIncrease"),v=document.getElementById("lineHeightDecrease"),L=document.getElementById("lineHeightLabel"),I=document.getElementById("resetDefaultsBtn"),B=document.getElementById("globalPrefsBtn"),P=document.getElementById("localPrefsBtn"),w=document.getElementById("onPageLoadBtn"),{start:M,setPrefs:x,defaultPrefs:S}=m.init({getOrigin:async()=>new Promise(((e,t)=>{chrome.tabs.query({active:!0,currentWindow:!0},(([t])=>{chrome.tabs.sendMessage(t.id,{type:"getOrigin"},(t=>{const n=t.data;n&&e(n)}))}))})),subscribe:e=>{var t;!function(e){const t=Number(e);y.textContent=t,f.value=t,chrome.tabs.query({active:!0,currentWindow:!0},(([e])=>{chrome.tabs.sendMessage(e.id,{type:"setSaccadesIntervalInDOM",data:t},(()=>{chrome.runtime.lastError}))}))}(e.saccadesInterval),function(e){p.textContent=e,b.value=e;const t={message:"setFixationStrength",type:"setFixationStrength",data:e};chrome.tabs.query({active:!0,currentWindow:!0},(([e])=>{chrome.tabs.sendMessage(e.id,t,(e=>{chrome.runtime.lastError}))}))}(e.fixationStrength),function(e){e&&(L.textContent=`Line Height ${parseInt(100*e,10)}%`);chrome.tabs.query({active:!0,currentWindow:!0},(([t])=>{chrome.tabs.sendMessage(t.id,{type:"setlineHeight",data:e})}))}(e.lineHeight),t=e.scope,[B,P].forEach((e=>{e.classList.remove("selected");const n=e.getAttribute("data-scope");t===n&&e.classList.add("selected")})),e.onPageLoad?w.classList.add("selected"):w.classList.remove("selected")},onStartup:e=>{e.onPageLoad?H(!0):chrome.tabs.query({active:!0,currentWindow:!0},(([e])=>{chrome.tabs.sendMessage(e.id,{type:"getReadingMode"},(e=>{H(e.data)}))}))}});function H(e){e?(h.classList.add("selected"),h.textContent="Reading Mode"):(h.classList.remove("selected"),h.textContent="Enable Reading Mode"),chrome.tabs.query({active:!0,currentWindow:!0},(([t])=>{chrome.tabs.sendMessage(t.id,{type:"setReadingMode",data:e},(()=>{chrome.runtime.lastError}))}))}f.addEventListener("change",(e=>{x({saccadesInterval:e.target.value})})),b.addEventListener("change",(e=>{x({fixationStrength:e.target.value})})),w.addEventListener("click",(e=>{x((({onPageLoad:e})=>({onPageLoad:!e})))})),I.addEventListener("click",(()=>{const{scope:e,...t}={...S()};x({...t})})),[B,P].forEach((e=>{e.addEventListener("click",(t=>{const n=e.getAttribute("data-scope");x((({scope:e,...t})=>"local"===n&&"global"===e?{...t,scope:n}:{scope:n}))}))})),[E,v].forEach((e=>{e.addEventListener("click",(t=>{const n=e.getAttribute("data-op");x((e=>{let t=parseFloat(e.lineHeight,10);return"increase"===n?t+=.5:t-=.5,{lineHeight:Math.max(1,t)}}))}))})),h.addEventListener("click",(e=>{H(!h.classList.contains("selected"))})),M()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNQyxPQUFPcEIsV0FJbkNuQixFQUF1QnFDLGlCQUFpQixVQUFXQyxJQUNqRDdELEVBQVMsQ0FDUHhCLGlCQUFrQnFGLEVBQU1DLE9BQU9wQixXQUluQ1gsRUFBYzZCLGlCQUFpQixTQUFVQyxJQUN2QzdELEdBQVMsRUFBR3RCLGlCQUFILENBQ1BBLFlBQWFBLFNBSWpCa0QsRUFBaUJnQyxpQkFBaUIsU0FBUyxLQUt6QyxNQUFNLE1BQUVuRixLQUFVc0YsR0FBWSxJQUFLMUYsS0FDbkMyQixFQUFTLElBQ0orRCxPQUlQLENBQUNsQyxFQUFnQkMsR0FBZW5CLFNBQVN5QyxJQUN2Q0EsRUFBR1EsaUJBQWlCLFNBQVVDLElBQzVCLE1BQU1wRixFQUFRMkUsRUFBR0ksYUFBYSxjQUM5QnhELEdBQVMsRUFBR3ZCLE1BQU91RixLQUFhQyxLQUNoQixVQUFWeEYsR0FBa0MsV0FBYnVGLEVBQ2hCLElBQ0ZDLEVBQ0h4RixTQUlHLENBQ0xBLGlCQU1SLENBQUNnRCxFQUFvQkMsR0FBb0JmLFNBQVN5QyxJQUNoREEsRUFBR1EsaUJBQWlCLFNBQVVDLElBQzVCLE1BQU1LLEVBQVlkLEVBQUdJLGFBQWEsV0FDbEN4RCxHQUFVbUUsSUFDUixJQUFJNUYsRUFBYTZGLFdBQVdELEVBQWE1RixXQUFZLElBTXJELE1BTGtCLGFBQWQyRixFQUNGM0YsR0FBYyxHQUVkQSxHQUFjLEdBRVIsQ0FDTkEsV0FBWThGLEtBQUtDLElBQUksRUFBRy9GLGFBNEJoQzJDLEVBQXFCMEMsaUJBQWlCLFNBQVVDLElBRTlDSCxHQURheEMsRUFBcUJtQyxVQUFVa0IsU0FBUyxnQkFJdkRoRSxLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL1ByZWZlcmVuY2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Qb3B1cC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkZWZhdWx0IHByZWZlcmVuY2VzXG4vLyBhbmQgc291cmNlIG9mIHRydXRoXG4vLyBmb3IgYm90aCBnbG9iYWwgYW5kIGxvY2FsIHByZWZzXG4vLyBzbyBuZXcgcHJlZmVyZW5jZXMgc2hvdWxkIGJlXG4vLyBhZGRlZCBoZXJlXG5jb25zdCBkZWZhdWx0UHJlZnMgPSB7XG4gIHNhY2NhZGVzSW50ZXJ2YWw6IDAsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIGZpeGF0aW9uU3RyZW5ndGg6IDIsXG4gIHNjb3BlOiAnZ2xvYmFsJyxcbiAgLy8gb25QYWdlTG9hZCBhcHBseSBwcmVmcyBvbiBwYWdlIGxvYWRcbiAgb25QYWdlTG9hZDogZmFsc2UsXG59O1xuXG4vLyBzdWJzY3JpYmVycyBob2xkcyBsaXN0IG9mIGNhbGxiYWNrcyB0aGF0IHdpbGwgYmVcbi8vIGNhbGxlZCB3aGVuIHByZWZlcmVuY2VzIGNoYW5nZXNcbi8vIG9yIG9uIHN0YXJ0dXBcbi8vIFBvcHVsYXRlZCB2aWEgaW5pdCBjb25maWcuXG5jb25zdCBzdWJzY3JpYmVycyA9IFtdO1xuY29uc3Qgc3RhcnR1cFN1YnNjcmliZXJzID0gW107XG4vLyBnZXRPcmlnaW4gaXMgYSBjYWxsIGJhY2tcbi8vIHRoYXQgc2hvdWxkIHJldHVybiB0aGUgb3JpZ2luIG9mIHRoZSBwYWdlLlxuLy8gRGVwZW5kaW5nIG9uIHRoZSBjb250ZXh0LCB3aGV0aGVyIGl0IGJlXG4vLyBwb3B1cCBvciBjb250ZW50IHNjcmlwdCwgdGhleSBtaWdodCBub3Rcbi8vIGhhdmUgZGlyZWN0IGFjY2VzcyB0byBvcmlnaW4sIHNvIGxldCB0aGVtIGRlZmluZVxuLy8gaG93IG9yaWdpbiBzaG91bGQgYmUgXCJnZXRcIlxuLy8gUG9wdWxhdGVkIHZpYSBpbml0IGNvbmZpZy5cbmxldCBnZXRPcmlnaW47XG5cbi8vIGluaXQgaXMgdGhlIGVudHJ5IHBvaW50IG9mIHRoZSBwcmVmZXJlbmNlXG4vLyB3aGljaCByZXR1cm5zIHRoZSBmb2xsb3dpbmc6XG4vLyAtIHN0YXJ0KCkgdG8ga2lja3N0YXJ0IHByZWZlcmVuY2Vcbi8vICAgIHJldHJpZXZhbCBhbmQgZGlzcGF0Y2ggdGhhdCBwcmVmZXJlbmNlXG4vLyAgICBmb3Igc3Vic2NyaWJlcnMgdG8ga25vd1xuLy8gL1xuLy8gLSBzZXRQcmVmcygpIHRvIHVwZGF0ZSBwcmVmZXJlbmNlc1xuLy8gICAgYW5kIGRpc3BhdGNoIHRoZSB1cGRhdGVzIGZvciBhbGxcbi8vICAgIHN1YnNjcmliZXJzXG4vLyAvXG4vLyAtIGRlZmF1bHRQcmVmcygpIC0gaXMgYSBnZXR0ZXIgdGhhdFxuLy8gICAgcmV0dXJucyB0aGUgZGVmYXVsdFByZWZlcmVuY2VzXG5mdW5jdGlvbiBpbml0KGNvbmZpZykge1xuICAvLyBjdXJyZW50bHkgb25seSBpbml0IGNhbiBhZGQgdG9cbiAgLy8gc3Vic2NyaWJlcnMgYnV0IGl0IGJlIGVhc3lcbiAgLy8gdG8gZXhwb3NlIGFub3RoZXIgYXBpIHRvIGFkZFxuICAvLyB0byBzdWJzY3JpYmVyIGlmIG5lZWRlZFxuICBzdWJzY3JpYmVycy5wdXNoKGNvbmZpZy5zdWJzY3JpYmUpO1xuICBpZiAoY29uZmlnLm9uU3RhcnR1cCkge1xuICAgIHN0YXJ0dXBTdWJzY3JpYmVycy5wdXNoKGNvbmZpZy5vblN0YXJ0dXApO1xuICB9XG4gIC8vIG5lY2Vzc2FyeSB0byBnZXQgdGhlIG9yaWdpblxuICAvLyB3aGljaCBpcyB1c2VkIHRvICdsb2NhbCcgQUtBIHBlci1zaXRlIHByZWZzXG4gIGdldE9yaWdpbiA9IGNvbmZpZy5nZXRPcmlnaW47XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydCxcbiAgICBzZXRQcmVmcyxcbiAgICBkZWZhdWx0UHJlZnM6ICgpID0+IGRlZmF1bHRQcmVmcyxcbiAgfTtcbn1cblxuLy8gUmV0cmlldmVzIHByZWZlcmVuY2VzIGZyb20gc3RvcmFnZSwgc3BlY2lmeSBpZlxuLy8gaXRzICdnbG9iYWwnIG9yICdsb2NhbCcgd2l0aCB0aGUgYWN0aW9uIHBhcmFtZXRlclxuYXN5bmMgZnVuY3Rpb24gcmV0cmlldmVQcmVmcyhhY3Rpb24pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZShcbiAgICAgIHsgbWVzc2FnZTogJ3JldHJpZXZlUHJlZnMnLCBhY3Rpb24gfSxcbiAgICAgIGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgfSxcbiAgICApO1xuICB9KTtcbn1cblxuLy8gU3RvcmVzIHByZWZlcmVuY2VzIGludG8gc3RvcmFnZSwgc3BlY2lmeVxuLy8gaWYgaXRzICdnbG9iYWwnIG9yICdsb2NhbCcgd2l0aCB0aGUgYWN0aW9uIHBhcmFtZXRlclxuZnVuY3Rpb24gc3RvcmVQcmVmcyhwcmVmcywgYWN0aW9uKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoXG4gICAgICB7IG1lc3NhZ2U6ICdzdG9yZVByZWZzJywgZGF0YTogcHJlZnMsIGFjdGlvbiB9LFxuICAgICAgYXN5bmMgKF8pID0+IHtcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfSk7XG59XG5cbi8vIFJldHJpZXZlcyBsb2NhbCBwcmVmZXJlbmNlcyBmcm9tIHN0b3JhZ2VcbmFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlTG9jYWxQcmVmcygpIHtcbiAgcmV0dXJuIHJldHJpZXZlUHJlZnMoJ2xvY2FsJyk7XG59XG5cbi8vIFJldHJpZXZlcyBnbG9iYWwgcHJlZmVyZW5jZXMgZnJvbSBzdG9yYWdlXG5hc3luYyBmdW5jdGlvbiByZXRyaXZlR2xvYmFsUHJlZnMoKSB7XG4gIHJldHVybiByZXRyaWV2ZVByZWZzKCdnbG9iYWwnKTtcbn1cblxuLy8gU3RvcmVzIGxvY2FsIHByZWZlcmVuY2VzIGludG8gc3RvcmFnZVxuYXN5bmMgZnVuY3Rpb24gc3RvcmVMb2NhbFByZWZzKHByZWZzKSB7XG4gIHJldHVybiBzdG9yZVByZWZzKHByZWZzLCAnbG9jYWwnKTtcbn1cblxuLy8gU3RvcmUgZ2xvYmFsIHByZWZlcmVuY2VzIGludG8gc3RvcmFnZVxuYXN5bmMgZnVuY3Rpb24gc3RvcmVHbG9iYWxQcmVmcyhwcmVmcykge1xuICByZXR1cm4gc3RvcmVQcmVmcyhwcmVmcywgJ2dsb2JhbCcpO1xufVxuXG4vLyBzZXRQcmVmcyB1cGRhdGVzIHRoZSBwcmVmZXJlbmNlcyBpbiBzdG9yYWdlXG4vLyBhbmQgZGlzcGF0Y2ggdGhpcyB1cGRhdGUgdG8gYWxsIHN1YnNjcmliZXJzXG4vLyBwcmVmcyAtIGhhcyB0aGUgc2hhcGUgb2YgZGVmYXVsdFByZWZzXG4vLyBvciBhIGNhbGwgYmFjayB0aGF0IHJldHVybnMgdGhhdCBzaGFwZVxuLy8gYnV0IHlvdSBvbmx5IG5lZWQgdG8gcGFzcyB0aGUgYWN0dWFsIGZpZWxkc1xuLy8geW91IHdhbnQgdG8gdXBkYXRlLlxuYXN5bmMgZnVuY3Rpb24gc2V0UHJlZnMocHJlZnMpIHtcbiAgLy8gZ3JhYiB0aGUgY3VycmVudCBwcmVmc1xuICBjb25zdCBsb2NhbFByZWZzID0gYXdhaXQgcmV0cmlldmVMb2NhbFByZWZzKCk7XG4gIGxldCBnbG9iYWxQcmVmcyA9IGF3YWl0IHJldHJpdmVHbG9iYWxQcmVmcygpO1xuICBjb25zdCBvcmlnaW4gPSBhd2FpdCBnZXRPcmlnaW4oKTtcblxuICBsZXQgY3VycmVudFNjb3BlID0gbG9jYWxQcmVmc1tvcmlnaW5dLnNjb3BlO1xuICAvLyBpZiBwcmVmcyBpcyBhIGZ1bmN0aW9uLCBwYXNzIGluIHRoZSBjdXJyZW50XG4gIC8vIHByZWZzIGJhc2VkIG9uIHRoZSBzY29wZVxuICAvLyBhbmQgbmV3UHJlZnMgd2lsbCBiZSB0aGUgcmV0dXJuIHZhbCBvZiB0aGUgZnVuY3Rpb25cbiAgLy8gb3RoZXJ3aXNlIHRoZSBuZXdQcmVmcyB3aWxsIGp1c3QgYmUgdGhlIHByZWZzXG4gIGNvbnN0IG5ld1ByZWZzID0gdHlwZW9mIHByZWZzID09PSAnZnVuY3Rpb24nXG4gICAgPyBwcmVmcyhjdXJyZW50U2NvcGUgPT09ICdsb2NhbCdcbiAgICAgID8gbG9jYWxQcmVmc1tvcmlnaW5dXG4gICAgICA6IGdsb2JhbFByZWZzKVxuICAgIDogcHJlZnM7XG5cbiAgaWYgKG5ld1ByZWZzLnNjb3BlKSB7XG4gICAgY3VycmVudFNjb3BlID0gbmV3UHJlZnMuc2NvcGU7XG4gIH1cblxuICBpZiAoY3VycmVudFNjb3BlID09PSAnbG9jYWwnKSB7XG4gICAgbG9jYWxQcmVmc1tvcmlnaW5dID0ge1xuICAgICAgLi4ubG9jYWxQcmVmc1tvcmlnaW5dLFxuICAgICAgLi4ubmV3UHJlZnMsXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxQcmVmcyA9IHtcbiAgICAgIC4uLmdsb2JhbFByZWZzLFxuICAgICAgLi4ubmV3UHJlZnMsXG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIG9ubHkgcmVhbGx5IGNhcmVcbiAgLy8gYWJvdXQgdGhlIHNjb3BlIG9mIGxvY2FsXG4gIC8vIGNhdXNlIHRoYXRzIGhvdyB3ZSBkZWNpZGVcbiAgLy8gaWYgdGhlIHNpdGUgd2FudHMgbG9jYWwgb3JcbiAgLy8gZ2xvYmFsIHNjb3BlXG4gIGxvY2FsUHJlZnNbb3JpZ2luXS5zY29wZSA9IGN1cnJlbnRTY29wZTtcbiAgZ2xvYmFsUHJlZnMuc2NvcGUgPSAnZ2xvYmFsJztcblxuICBkaXNwYXRjaFByZWZzVXBkYXRlKGN1cnJlbnRTY29wZSA9PT0gJ2xvY2FsJ1xuICAgID8gbG9jYWxQcmVmc1tvcmlnaW5dXG4gICAgOiBnbG9iYWxQcmVmcyk7XG5cbiAgc3RvcmVMb2NhbFByZWZzKGxvY2FsUHJlZnMpO1xuICBzdG9yZUdsb2JhbFByZWZzKGdsb2JhbFByZWZzKTtcbn1cblxuLy8gc3RhcnQgLSBraWNrc3RhcnRzIHRoZSByZXRyaWV2YWwgb2YgdGhlIGN1cnJlbnQgcHJlZmVyZW5jZVxuLy8gYW5kIGRpc3BhdGNoIHRoYXQgcHJlZnMgdG8gc3Vic2NyaWJlcnNcbi8vIGZvciBleGFtcGxlIHVzYWdlLCBzZWUgUHJlZmVyZW5jZS5pbml0IG9uXG4vLyBQb3B1cC9pbmRleC5qcyBhbmQgQ29udGVudFNjcmlwdC9pbmRleC5qc1xuYXN5bmMgZnVuY3Rpb24gc3RhcnQoKSB7XG4gIGxldCBsb2NhbFByZWZzID0gYXdhaXQgcmV0cmlldmVMb2NhbFByZWZzKCk7XG4gIGxldCBnbG9iYWxQcmVmcyA9IGF3YWl0IHJldHJpdmVHbG9iYWxQcmVmcygpO1xuICBjb25zdCBvcmlnaW4gPSBhd2FpdCBnZXRPcmlnaW4oKTtcblxuICBpZiAobG9jYWxQcmVmcyA9PSBudWxsKSB7XG4gICAgbG9jYWxQcmVmcyA9IHt9O1xuICB9XG5cbiAgLy8ganVzdCBpbiBjYXNlIHRoZWlyIG1pc3NpbmcgYSBkZWZhdWx0IHByZWZzXG4gIC8vIGJlIHN1cmUgdG8gcGVwcGVyIHRoZSBkZWZhdWx0IHByZWZzXG4gIGxvY2FsUHJlZnNbb3JpZ2luXSA9IHsgLi4uZGVmYXVsdFByZWZzLCAuLi5sb2NhbFByZWZzW29yaWdpbl0gfTtcbiAgZ2xvYmFsUHJlZnMgPSB7IC4uLmRlZmF1bHRQcmVmcywgLi4uZ2xvYmFsUHJlZnMgfTtcblxuICBzdG9yZUxvY2FsUHJlZnMobG9jYWxQcmVmcyk7XG4gIHN0b3JlR2xvYmFsUHJlZnMoZ2xvYmFsUHJlZnMpO1xuXG4gIGlmIChsb2NhbFByZWZzW29yaWdpbl0uc2NvcGUgPT09ICdnbG9iYWwnKSB7XG4gICAgZGlzcGF0Y2hQcmVmc1VwZGF0ZShnbG9iYWxQcmVmcyk7XG4gICAgZGlzcGF0Y2hQcmVmc1VwZGF0ZShnbG9iYWxQcmVmcywgc3RhcnR1cFN1YnNjcmliZXJzKTtcbiAgfSBlbHNlIHtcbiAgICBkaXNwYXRjaFByZWZzVXBkYXRlKGxvY2FsUHJlZnNbb3JpZ2luXSk7XG4gICAgZGlzcGF0Y2hQcmVmc1VwZGF0ZShsb2NhbFByZWZzW29yaWdpbl0sIHN0YXJ0dXBTdWJzY3JpYmVycyk7XG4gIH1cbn1cblxuLy8gY2FsbHMgYWxsIHN1YnNjcmliZXIgY2FsbCBiYWNrXG4vLyBhbmQgcGFzcyB0aGVtIHRoZSBwcmVmZXJlbmNlIHZpYSBwcmVmc1xuLy8gcGFyYW1zXG5mdW5jdGlvbiBkaXNwYXRjaFByZWZzVXBkYXRlKHByZWZzLCBjYnMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2JzKSkge1xuICAgIGNicy5mb3JFYWNoKChjYikgPT4ge1xuICAgICAgY2IocHJlZnMpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiB7XG4gICAgICBjYihwcmVmcyk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbml0LFxufTtcbiIsImltcG9ydCBQcmVmZXJlbmNlcyBmcm9tICcuLi9QcmVmZXJlbmNlcyc7XG5cbmNvbnN0IHJlYWRpbmdNb2RlVG9nZ2xlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWRpbmdNb2RlVG9nZ2xlQnRuJyk7XG5jb25zdCBzYWNjYWRlc0ludGVydmFsU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NhY2NhZGVzU2xpZGVyJyk7XG5jb25zdCBzYWNjYWRlc0xhYmVsVmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2FjY2FkZXNMYWJlbFZhbHVlJyk7XG5jb25zdCBmaXhhdGlvblN0cmVuZ3RoU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpeGF0aW9uU3RyZW5ndGhTbGlkZXInKTtcbmNvbnN0IGZpeGF0aW9uU3RyZW5ndGhMYWJlbFZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpeGF0aW9uU3RyZW5ndGhMYWJlbFZhbHVlJyk7XG5jb25zdCBsaW5lSGVpZ2h0SW5jcmVhc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZUhlaWdodEluY3JlYXNlJyk7XG5jb25zdCBsaW5lSGVpZ2h0RGVjcmVhc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZUhlaWdodERlY3JlYXNlJyk7XG5jb25zdCBsaW5lSGVpZ2h0TGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZUhlaWdodExhYmVsJyk7XG5jb25zdCByZXNldERlZmF1bHRzQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2V0RGVmYXVsdHNCdG4nKTtcbmNvbnN0IGdsb2JhbFByZWZzQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dsb2JhbFByZWZzQnRuJyk7XG5jb25zdCBsb2NhbFByZWZzQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvY2FsUHJlZnNCdG4nKTtcbmNvbnN0IG9uUGFnZUxvYWRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb25QYWdlTG9hZEJ0bicpO1xuXG5jb25zdCB7IHN0YXJ0LCBzZXRQcmVmcywgZGVmYXVsdFByZWZzIH0gPSBQcmVmZXJlbmNlcy5pbml0KHtcbiAgZ2V0T3JpZ2luOiBhc3luYyAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgXykgPT4ge1xuICAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sIChbdGFiXSkgPT4ge1xuICAgICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCB7IHR5cGU6ICdnZXRPcmlnaW4nIH0sIChyZXMpID0+IHtcbiAgICAgICAgY29uc3Qgb3JpZ2luID0gcmVzLmRhdGE7XG4gICAgICAgIGlmIChvcmlnaW4pIHtcbiAgICAgICAgICByZXNvbHZlKG9yaWdpbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KSxcbiAgc3Vic2NyaWJlOiAocHJlZnMpID0+IHtcbiAgICBvblNhY2NhZGVzSW50ZXJ2YWwocHJlZnMuc2FjY2FkZXNJbnRlcnZhbCk7XG4gICAgb25GaXhhdGlvblN0cmVuZ3RoKHByZWZzLmZpeGF0aW9uU3RyZW5ndGgpO1xuICAgIG9uTGluZUhlaWdodChwcmVmcy5saW5lSGVpZ2h0KTtcbiAgICBvblNjb3BlUHJlZmVyZW5jZShwcmVmcy5zY29wZSk7XG4gICAgb25QYWdlTG9hZFRvZ2dsZWQocHJlZnMub25QYWdlTG9hZCk7XG4gIH0sXG4gIG9uU3RhcnR1cDogKHByZWZzKSA9PiB7XG4gICAgaWYgKHByZWZzLm9uUGFnZUxvYWQpIHtcbiAgICAgIC8vIG9ubHkgdG9nZ2xlIHJlYWRpbmcgbW9kZSBvbiBzdGFydHVwXG4gICAgICAvLyBpZiBvbnBhZ2UgbG9hZCBpcyB0cnVlXG4gICAgICBvblJlYWRpbmdNb2RlVG9nZ2xlZCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgcGFnZSBsb2FkIGlzIG5vdCB0cnVlXG4gICAgICAvLyBpdHMgcG9zc2libGUgd2Ugc3RpbGwgaGF2ZSByZWFkaW5nIG1vZGUgYWN0aXZlIG9uIHRoZSBjdXJyZW50XG4gICAgICAvLyBpZiB0aGUgdXNlciBkaWRudCByZWxvYWQgdGhlIHBhZ2UsIGFuZCBqdXN0IHJlbG9hZGVkIHRoZVxuICAgICAgLy8gcG9wdXAgc2NyaXB0XG4gICAgICAvLyB0YWIgc28gYXMgYSBsYXN0IHJlc29ydCwgbWFrZSBzdXJlIHRvIGNoZWNrIHRoZSB2aWV3XG4gICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBjYXVzZSB3ZSBkb24ndCBzdG9yZSB0aGUgcHJlZmVyZW5jZVxuICAgICAgLy8gZm9yIHJlYWRpbmcgbW9kZVxuICAgICAgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgKFt0YWJdKSA9PiB7XG4gICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgeyB0eXBlOiAnZ2V0UmVhZGluZ01vZGUnIH0sIChyZXMpID0+IHtcbiAgICAgICAgICBvblJlYWRpbmdNb2RlVG9nZ2xlZChyZXMuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxufSk7XG5cbmZ1bmN0aW9uIG9uRml4YXRpb25TdHJlbmd0aCh2YWx1ZSkge1xuICBmaXhhdGlvblN0cmVuZ3RoTGFiZWxWYWx1ZS50ZXh0Q29udGVudCA9IHZhbHVlO1xuICBmaXhhdGlvblN0cmVuZ3RoU2xpZGVyLnZhbHVlID0gdmFsdWU7XG4gIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgbWVzc2FnZTogJ3NldEZpeGF0aW9uU3RyZW5ndGgnLFxuICAgIHR5cGU6ICdzZXRGaXhhdGlvblN0cmVuZ3RoJyxcbiAgICBkYXRhOiB2YWx1ZSxcbiAgfTtcbiAgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgKFt0YWJdKSA9PiB7XG4gICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCBwYXlsb2FkLCAocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgLy8gbm8tb3BcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uU2FjY2FkZXNJbnRlcnZhbCh2YWx1ZSkge1xuICBjb25zdCBzYWNjYWRlc0ludGVydmFsID0gTnVtYmVyKHZhbHVlKTtcbiAgc2FjY2FkZXNMYWJlbFZhbHVlLnRleHRDb250ZW50ID0gc2FjY2FkZXNJbnRlcnZhbDtcbiAgc2FjY2FkZXNJbnRlcnZhbFNsaWRlci52YWx1ZSA9IHNhY2NhZGVzSW50ZXJ2YWw7XG4gIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0sIChbdGFiXSkgPT4ge1xuICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKFxuICAgICAgdGFiLmlkLFxuICAgICAgeyB0eXBlOiAnc2V0U2FjY2FkZXNJbnRlcnZhbEluRE9NJywgZGF0YTogc2FjY2FkZXNJbnRlcnZhbCB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgLy8gbm8tb3BcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25QYWdlTG9hZFRvZ2dsZWQoZW5hYmxlZCkge1xuICBpZiAoZW5hYmxlZCkge1xuICAgIG9uUGFnZUxvYWRCdG4uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgfSBlbHNlIHtcbiAgICBvblBhZ2VMb2FkQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25MaW5lSGVpZ2h0KGhlaWdodCkge1xuICBpZiAoaGVpZ2h0KSB7XG4gICAgbGluZUhlaWdodExhYmVsLnRleHRDb250ZW50ID0gYExpbmUgSGVpZ2h0ICR7cGFyc2VJbnQoaGVpZ2h0ICogMTAwLCAxMCl9JWA7XG4gIH1cbiAgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgKFt0YWJdKSA9PiB7XG4gICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UoXG4gICAgICB0YWIuaWQsXG4gICAgICB7IHR5cGU6ICdzZXRsaW5lSGVpZ2h0JywgZGF0YTogaGVpZ2h0IH0sXG4gICAgKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uU2NvcGVQcmVmZXJlbmNlKHNjb3BlKSB7XG4gIFtnbG9iYWxQcmVmc0J0biwgbG9jYWxQcmVmc0J0bl0uZm9yRWFjaCgoZWwpID0+IHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgIGNvbnN0IHNjb3BlQXR0ciA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zY29wZScpO1xuICAgIGlmIChzY29wZSA9PT0gc2NvcGVBdHRyKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnNhY2NhZGVzSW50ZXJ2YWxTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gIHNldFByZWZzKHtcbiAgICBzYWNjYWRlc0ludGVydmFsOiBldmVudC50YXJnZXQudmFsdWUsXG4gIH0pO1xufSk7XG5cbmZpeGF0aW9uU3RyZW5ndGhTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gIHNldFByZWZzKHtcbiAgICBmaXhhdGlvblN0cmVuZ3RoOiBldmVudC50YXJnZXQudmFsdWUsXG4gIH0pO1xufSk7XG5cbm9uUGFnZUxvYWRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgc2V0UHJlZnMoKHsgb25QYWdlTG9hZCB9KSA9PiAoe1xuICAgIG9uUGFnZUxvYWQ6ICFvblBhZ2VMb2FkLFxuICB9KSk7XG59KTtcblxucmVzZXREZWZhdWx0c0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgLy8gd2hlbiByZXNldHRpbmcgZGVmYXVsdCwgd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIHNjb3BlXG4gIC8vIGNhdXNlIHRoZSBzZXRQcmVmcyBrbm93cyB3aGljaCBzY29wZSB3ZSBjdXJyZW50bHkgYXQuXG4gIC8vIGFuZCBpdCBzaG91bGQgb25seSByZXNldCB0aGUgY3VycmVudCBzZWxlY3RlZCBzY29wZVxuICAvLyBzY29wZSBieSB0aGUgdXNlclxuICBjb25zdCB7IHNjb3BlLCAuLi5ub1Njb3BlIH0gPSB7IC4uLmRlZmF1bHRQcmVmcygpIH07XG4gIHNldFByZWZzKHtcbiAgICAuLi5ub1Njb3BlLFxuICB9KTtcbn0pO1xuXG5bZ2xvYmFsUHJlZnNCdG4sIGxvY2FsUHJlZnNCdG5dLmZvckVhY2goKGVsKSA9PiB7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgY29uc3Qgc2NvcGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2NvcGUnKTtcbiAgICBzZXRQcmVmcygoeyBzY29wZTogb2xkU2NvcGUsIC4uLm9sZFByZWZzIH0pID0+IHtcbiAgICAgIGlmIChzY29wZSA9PT0gJ2xvY2FsJyAmJiBvbGRTY29wZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5vbGRQcmVmcyxcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NvcGUsXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5bbGluZUhlaWdodEluY3JlYXNlLCBsaW5lSGVpZ2h0RGVjcmVhc2VdLmZvckVhY2goKGVsKSA9PiB7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLW9wJyk7XG4gICAgc2V0UHJlZnMoKGN1cnJlbnRQcmVmcykgPT4ge1xuICAgICAgbGV0IGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KGN1cnJlbnRQcmVmcy5saW5lSGVpZ2h0LCAxMCk7XG4gICAgICBpZiAob3BlcmF0aW9uID09PSAnaW5jcmVhc2UnKSB7XG4gICAgICAgIGxpbmVIZWlnaHQgKz0gMC41O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGluZUhlaWdodCAtPSAwLjU7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHtcbiAgICAgICAgbGluZUhlaWdodDogTWF0aC5tYXgoMSwgbGluZUhlaWdodCksXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gb25SZWFkaW5nTW9kZVRvZ2dsZWQoZW5hYmxlZCkge1xuICBpZiAoZW5hYmxlZCkge1xuICAgIHJlYWRpbmdNb2RlVG9nZ2xlQnRuLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgcmVhZGluZ01vZGVUb2dnbGVCdG4udGV4dENvbnRlbnQgPSAnUmVhZGluZyBNb2RlJztcbiAgfSBlbHNlIHtcbiAgICByZWFkaW5nTW9kZVRvZ2dsZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgIHJlYWRpbmdNb2RlVG9nZ2xlQnRuLnRleHRDb250ZW50ID0gJ0VuYWJsZSBSZWFkaW5nIE1vZGUnO1xuICB9XG5cbiAgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgKFt0YWJdKSA9PiB7XG4gICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UoXG4gICAgICB0YWIuaWQsXG4gICAgICB7IHR5cGU6ICdzZXRSZWFkaW5nTW9kZScsIGRhdGE6IGVuYWJsZWQgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikge1xuICAgICAgICAgIC8vIG5vLW9wXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcbiAgfSk7XG59XG5cbnJlYWRpbmdNb2RlVG9nZ2xlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gIGNvbnN0IGlzT24gPSByZWFkaW5nTW9kZVRvZ2dsZUJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJyk7XG4gIG9uUmVhZGluZ01vZGVUb2dnbGVkKCFpc09uKTtcbn0pO1xuXG5zdGFydCgpO1xuIl0sIm5hbWVzIjpbImRlZmF1bHRQcmVmcyIsInNhY2NhZGVzSW50ZXJ2YWwiLCJsaW5lSGVpZ2h0IiwiZml4YXRpb25TdHJlbmd0aCIsInNjb3BlIiwib25QYWdlTG9hZCIsInN1YnNjcmliZXJzIiwic3RhcnR1cFN1YnNjcmliZXJzIiwiZ2V0T3JpZ2luIiwiYXN5bmMiLCJyZXRyaWV2ZVByZWZzIiwiYWN0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjaHJvbWUiLCJydW50aW1lIiwic2VuZE1lc3NhZ2UiLCJtZXNzYWdlIiwicmVzcG9uc2UiLCJkYXRhIiwic3RvcmVQcmVmcyIsInByZWZzIiwicmV0cmlldmVMb2NhbFByZWZzIiwicmV0cml2ZUdsb2JhbFByZWZzIiwic3RvcmVMb2NhbFByZWZzIiwic3RvcmVHbG9iYWxQcmVmcyIsInNldFByZWZzIiwibG9jYWxQcmVmcyIsImdsb2JhbFByZWZzIiwib3JpZ2luIiwiY3VycmVudFNjb3BlIiwibmV3UHJlZnMiLCJkaXNwYXRjaFByZWZzVXBkYXRlIiwic3RhcnQiLCJjYnMiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiY2IiLCJpbml0IiwiY29uZmlnIiwicHVzaCIsInN1YnNjcmliZSIsIm9uU3RhcnR1cCIsInJlYWRpbmdNb2RlVG9nZ2xlQnRuIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNhY2NhZGVzSW50ZXJ2YWxTbGlkZXIiLCJzYWNjYWRlc0xhYmVsVmFsdWUiLCJmaXhhdGlvblN0cmVuZ3RoU2xpZGVyIiwiZml4YXRpb25TdHJlbmd0aExhYmVsVmFsdWUiLCJsaW5lSGVpZ2h0SW5jcmVhc2UiLCJsaW5lSGVpZ2h0RGVjcmVhc2UiLCJsaW5lSGVpZ2h0TGFiZWwiLCJyZXNldERlZmF1bHRzQnRuIiwiZ2xvYmFsUHJlZnNCdG4iLCJsb2NhbFByZWZzQnRuIiwib25QYWdlTG9hZEJ0biIsIlByZWZlcmVuY2VzIiwiXyIsInRhYnMiLCJxdWVyeSIsImFjdGl2ZSIsImN1cnJlbnRXaW5kb3ciLCJ0YWIiLCJpZCIsInR5cGUiLCJyZXMiLCJ2YWx1ZSIsIk51bWJlciIsInRleHRDb250ZW50IiwibGFzdEVycm9yIiwib25TYWNjYWRlc0ludGVydmFsIiwicGF5bG9hZCIsIm9uRml4YXRpb25TdHJlbmd0aCIsImhlaWdodCIsInBhcnNlSW50Iiwib25MaW5lSGVpZ2h0IiwiZWwiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJzY29wZUF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJhZGQiLCJvblJlYWRpbmdNb2RlVG9nZ2xlZCIsImVuYWJsZWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJub1Njb3BlIiwib2xkU2NvcGUiLCJvbGRQcmVmcyIsIm9wZXJhdGlvbiIsImN1cnJlbnRQcmVmcyIsInBhcnNlRmxvYXQiLCJNYXRoIiwibWF4IiwiY29udGFpbnMiXSwic291cmNlUm9vdCI6IiJ9